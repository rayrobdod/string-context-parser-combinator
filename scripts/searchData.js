pages = [{"l":"index.html","n":"string-context-parser-combinator","t":"string-context-parser-combinator","d":""},
{"l":"docs/usage/index.html","n":"usage","t":"usage","d":""},
{"l":"docs/usage/context-parameters.html","n":"Context Parameters","t":"Context Parameters","d":""},
{"l":"index.html","n":"index","t":"index","d":""},
{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/com/rayrobdod/stringContextParserCombinator.html","n":"com.rayrobdod.stringContextParserCombinator","t":"package com.rayrobdod.stringContextParserCombinator","d":"com/rayrobdod/stringContextParserCombinator"},
{"l":"api/com/rayrobdod/stringContextParserCombinator.html","n":"macroimpl","t":"def macroimpl[Z](parser: Parser[Expr[_], Expr[Z]])(sc: Expr[StringContext], args: Expr[Seq[Any]])(using Quotes): Expr[Z]","d":"com/rayrobdod/stringContextParserCombinator"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/CodePoint.html","n":"CodePoint","t":"class CodePoint(value: Int)","d":"com/rayrobdod/stringContextParserCombinator/CodePoint"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Failure.html","n":"Failure","t":"class Failure[+Expr](trace: Trace[Expr], isCut: Cut) extends Result[Expr, Nothing]","d":"com/rayrobdod/stringContextParserCombinator/Failure"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Input.html","n":"Input","t":"class Input[+Expr](val parts: List[(String, Position)], val args: List[Expr])","d":"com/rayrobdod/stringContextParserCombinator/Input"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/LiftFunction.html","n":"LiftFunction","t":"trait LiftFunction[CC[A], Z]","d":"com/rayrobdod/stringContextParserCombinator/LiftFunction"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/LiftFunction.html","n":"apply","t":"def apply[A](lifter: Expr[CC[A]], elem: Expr[A])(`evidence$1`: Type[A], Quotes): Z","d":"com/rayrobdod/stringContextParserCombinator/LiftFunction"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"Parser","t":"trait Parser[Expr, +A]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"parse","t":"def parse(input: Input[Expr]): Result[Expr, A]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"map","t":"def map[Z](fn: A => Z): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"flatMap","t":"def flatMap[Z](fn: A => Parser[Expr, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"filter","t":"def filter(predicate: A => Boolean, description: String): Parser[Expr, A]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"opaque","t":"def opaque(description: String): Parser[Expr, A]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"andThen","t":"def andThen[B, Z](rhs: Parser[Expr, B])(ev: Sequenced[A, B, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"andThenWithCut","t":"def andThenWithCut[B, Z](rhs: Parser[Expr, B])(ev: Sequenced[A, B, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"orElse","t":"def orElse[B, Z](rhs: Parser[Expr, B])(ev: Eithered[A, B, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"repeat","t":"def repeat[Z](min: Int, max: Int, delimiter: Parser[Expr, Unit])(ev: Repeated[A, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parser.html","n":"optionally","t":"def optionally[Z](ev: Optionally[A, Z]): Parser[Expr, Z]","d":"com/rayrobdod/stringContextParserCombinator/Parser"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"Parsers","t":"object Parsers","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"Parser","t":"type Parser[A] = Parser[Expr[_], A]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"CharIn","t":"def CharIn(str: Seq[Char]): Parser[Char]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"CharIn","t":"def CharIn(str: String): Parser[Char]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"CharWhere","t":"def CharWhere(fn: Char => Boolean, description: String): Parser[Char]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"CodePointIn","t":"def CodePointIn(str: String): Parser[CodePoint]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"CodePointWhere","t":"def CodePointWhere(fn: CodePoint => Boolean, description: String): Parser[CodePoint]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"IsString","t":"def IsString(str: String): Parser[Unit]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"OfType","t":"def OfType[A](`evidence$1`: Type[A], Quotes): Parser[Expr[A]]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"Lifted","t":"def Lifted[Lifter[A], Z](lift: LiftFunction[Lifter, Z], description: String)(`evidence$2`: Type[Lifter], Quotes): Parser[Z]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"End","t":"def End(): Parser[Unit]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Parsers$.html","n":"DelayedConstruction","t":"def DelayedConstruction[A](fn: () => Parser[A]): Parser[A]","d":"com/rayrobdod/stringContextParserCombinator/Parsers$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Position.html","n":"Position","t":"trait Position","d":"com/rayrobdod/stringContextParserCombinator/Position"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Position.html","n":"+","t":"def +(rhs: Int): Position","d":"com/rayrobdod/stringContextParserCombinator/Position"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Position.html","n":"throwError","t":"def throwError(msg: String): Nothing","d":"com/rayrobdod/stringContextParserCombinator/Position"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Position$.html","n":"Position","t":"object Position","d":"com/rayrobdod/stringContextParserCombinator/Position$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Position$.html","n":"apply","t":"def apply(expr: Expr[_])(using q: Quotes): Position","d":"com/rayrobdod/stringContextParserCombinator/Position$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Result.html","n":"Result","t":"trait Result[+Expr, +A]","d":"com/rayrobdod/stringContextParserCombinator/Result"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/Success.html","n":"Success","t":"class Success[+Expr, +A](value: A, remaining: Input[Expr], trace: Trace[Expr], isCut: Cut) extends Result[Expr, A]","d":"com/rayrobdod/stringContextParserCombinator/Success"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel.html","n":"com.rayrobdod.stringContextParserCombinator.typelevel","t":"package com.rayrobdod.stringContextParserCombinator.typelevel","d":"com/rayrobdod/stringContextParserCombinator/typelevel"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered.html","n":"Eithered","t":"trait Eithered[-A, -B, +Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered.html","n":"left","t":"def left(elem: A): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered.html","n":"right","t":"def right(elem: B): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$.html","n":"Eithered","t":"object Eithered extends LowPrioEithered","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$.html","n":"unitUnit","t":"val unitUnit: Eithered[Unit, Unit, Unit]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"unitAny","t":"given unitAny[B, Z](using val ev: Optionally[B, Z]): Eithered[Unit, B, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"ev","t":"val ev: Optionally[B, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"left","t":"def left(elem: Unit): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"right","t":"def right(elem: B): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"anyUnit","t":"given anyUnit[A, Z](using val ev: Optionally[A, Z]): Eithered[A, Unit, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"ev","t":"val ev: Optionally[A, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"left","t":"def left(elem: A): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"right","t":"def right(elem: Unit): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$.html","n":"discriminatedUnion","t":"def discriminatedUnion[A, B]: Eithered[A, B, Either[A, B]]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"unitAny","t":"given unitAny[B, Z](using val ev: Optionally[B, Z]): Eithered[Unit, B, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"ev","t":"val ev: Optionally[B, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"left","t":"def left(elem: Unit): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny.html","n":"right","t":"def right(elem: B): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$unitAny"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"anyUnit","t":"given anyUnit[A, Z](using val ev: Optionally[A, Z]): Eithered[A, Unit, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"ev","t":"val ev: Optionally[A, Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"left","t":"def left(elem: A): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit.html","n":"right","t":"def right(elem: Unit): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Eithered$$anyUnit"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Optionally.html","n":"Optionally","t":"trait Optionally[-A, +Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Optionally"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Optionally.html","n":"none","t":"def none: Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Optionally"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Optionally.html","n":"some","t":"def some(elem: A): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Optionally"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Optionally$.html","n":"Optionally","t":"object Optionally extends LowPrioOptionally","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Optionally$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Optionally$.html","n":"optionallyUnit","t":"def optionallyUnit: Optionally[Unit, Unit]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Optionally$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated.html","n":"Repeated","t":"trait Repeated[-A, +Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated.html","n":"Acc","t":"type Acc","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated.html","n":"init","t":"def init(): Acc","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated.html","n":"append","t":"def append(acc: Acc, elem: A): Unit","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated.html","n":"result","t":"def result(acc: Acc): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$.html","n":"Repeated","t":"object Repeated extends LowPrioRepeated","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$.html","n":"repeatedUnit","t":"def repeatedUnit: Repeated[Unit, Unit]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$.html","n":"repeatedChar","t":"def repeatedChar: Repeated[Char, String]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$.html","n":"repeatedCodepoint","t":"def repeatedCodepoint: Repeated[CodePoint, String]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Repeated$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced.html","n":"Sequenced","t":"trait Sequenced[-A, -B, +Z]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced.html","n":"aggregate","t":"def aggregate(left: A, right: B): Z","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$.html","n":"Sequenced","t":"object Sequenced extends LowPrioSequenced","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$.html","n":"sequencedUnitUnit","t":"def sequencedUnitUnit: Sequenced[Unit, Unit, Unit]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$.html","n":"sequencedUnitGeneric","t":"def sequencedUnitGeneric[B]: Sequenced[Unit, B, B]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$"},
{"l":"api/com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$.html","n":"sequencedGenericUnit","t":"def sequencedGenericUnit[A]: Sequenced[A, Unit, A]","d":"com/rayrobdod/stringContextParserCombinator/typelevel/Sequenced$"}];