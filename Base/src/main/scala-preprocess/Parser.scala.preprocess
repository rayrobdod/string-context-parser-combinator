package com.rayrobdod.stringContextParserCombinator

#if scala=2.x
import scala.reflect.macros.blackbox.Context
#endif

/**
 * Parses an interpolated string expression into some value
 *
 * @tparam Expr the macro-level expression type.
 * @tparam A the type of the parsed result
 *
 * @groupname Parse parse
 * @groupprio Parse 100
 * @groupname Combinator Combinators
 * @groupprio Combinator 3010
 */
trait Parser[-Expr, +A] {
#if scala=2.x
	/**
	 * Parses a StringContext and its arguments into a value
	 *
	 * @example
	 * {{{
	 * def valueImpl(c:Context)(args:c.Expr[Any]*):c.Expr[Result] = {
	 *   val myParser:Parser[Expr[Result]] = ???
	 *   myParser.parse(c)("package.ValueStringContext")(args)
	 * }
	 *
	 * implicit final class ValueStringContext(val sc:scala.StringContext) extends AnyVal {
	 *   def value(args:Any*):Result = macro valueImpl
	 * }
	 * }}}
	 * @group Parse
	 */
	final def parse(c:Context)(extensionClassName:String)(args:Seq[c.Expr[Any]])(implicit ev:c.Expr[_] <:< Expr):A = {
		val ExtensionClassSelectChain = selectChain(c, extensionClassName)
		val StringContextApply = stringContextApply(c)

		import c.universe.ApplyTag
		val strings = c.prefix.tree.duplicate match {
			case c.universe.Apply(
				ExtensionClassSelectChain(),
				List(StringContextApply(strings))
			) => {
				strings.map({x => (c.eval(x), Position(x.tree.pos))})
			}
			case _ => c.abort(c.enclosingPosition, s"Do not know how to process this tree: " + c.universe.showRaw(c.prefix))
		}

		val input = new Input[c.Expr[Any], Position.Impl](strings, args.toList, x => Position(x.tree.pos))

#if scala=2.13.x
		type ExprCoSubst[+B] = Input[B, Position.Impl]
		val input2:Input[Expr, Position.Impl] = ev.substituteCo[ExprCoSubst](input)
#else
		val input2 = input.asInstanceOf[Input[Expr, Position.Impl]]
#endif

		this.parse(input2) match {
			case s:Success[_, _, _] => {
				s.choicesHead.value
			}
			case f:Failure[Position.Impl] => {
				reportFailure(c)(f)
			}
		}
	}
#else
	/**
	 * Parses a StringContext and its arguments into a value
	 *
	 * @example
	 * ```
	 * def valueImpl(sc:Expr[scala.StringContext],
	 *         args:Expr[Seq[Any]])(using Quotes):Expr[Result] = {
	 *   val myParser:Parser[Expr[Result]] = ???
	 *   myParser.parse(sc, args)
	 * }
	 *
	 * extension (inline sc:scala.StringContext)
	 *	  inline def value(inline args:Any*):Result =
	 *	    ${valueImpl('sc, 'args)}
	 * ```
	 * @group Parse
	 */
	final def parse(sc:quoted.Expr[scala.StringContext], args:quoted.Expr[Seq[Any]])(using q:quoted.Quotes, ev:quoted.Expr[_] <:< Expr):A = {
		import scala.quoted.*
		val strings = sc match {
			case '{ _root_.scala.StringContext(${Varargs(args)}: _*) } => args
			case _ => scala.quoted.quotes.reflect.report.throwError(s"Do not know how to process this tree", sc)
		}
		val strings2 = strings.map(x => ((x.valueOrError, Position(x)))).toList
		val args2 = Varargs.unapply(args).get.toList

		val input = new Input[quoted.Expr[_], Position.Impl](strings2, args2, x => Position(x))
		val input2:Input[this.Expr, Position.Impl] = ev.substituteCo[[A] =>> Input[A, Position.Impl]](input)

		this.parse(input2) match {
			case s@Success(_, _) => {
				s.choicesHead.value
			}
			case f@Failure(_, _) => {
				reportFailure(f)
			}
		}
	}
#endif

	private[stringContextParserCombinator]
	def parse[ExprZ <: Expr, Pos](input:Input[ExprZ, Pos]):Result[ExprZ, Pos, A]

	/**
	 * Returns a parser which invokes this parser, then modifies a successful result according to fn
	 * @group Combinator
	 */
	def map[Z](fn:Function1[A, Z]):Parser[Expr, Z] =
		new parsers.Map(this, fn)

	/**
	 * Returns a parser which invokes this parser, then modifies a successful result according to the parser returned by fn
	 * @group Combinator
	 */
	def flatMap[ExprZ <: Expr, Z](fn:Function1[A, Parser[ExprZ, Z]]):Parser[ExprZ, Z] =
		new parsers.FlatMap(this, fn)

	/**
	 * Returns a parser which invokes this parser, then fails a successful result if it does not pass the predicate
	 * @group Combinator
	 */
	def filter(predicate:Function1[A, Boolean], description:String):Parser[Expr, A] =
		new parsers.Filter(this, predicate, ExpectingDescription(description))


	/**
	 * Returns a parser which invokes this parser, but has the given description upon failure
	 * @group Combinator
	 */
	def opaque(description:String):Parser[Expr, A] =
		new parsers.Opaque(this, ExpectingDescription(description))


	/**
	 * Returns a parser which invokes this parser, and upon success invokes the other parser.
	 *
	 * @tparam Z the result parser's parsed value type
	 * @param rhs the parser to call after this one
	 * @param ev A descriptor of how to combine two values into one value
	 * @group Combinator
	 */
	def andThen[ExprZ <: Expr, B, Z](rhs:Parser[ExprZ, B])(implicit ev:typelevel.Sequenced[A,B,Z]):Parser[ExprZ, Z] =
		new parsers.AndThen(this, rhs, ev)

	/**
	 * Returns a parser which invokes this parser, and upon success invokes the other parser.
	 * If the second parser fails, the error is marked so that prior
	 * `orElse` parsers will not try other branches.
	 *
	 * @tparam Z the result parser's parsed value type
	 * @param rhs the parser to call after this one
	 * @param ev A descriptor of how to combine two values into one value
	 * @group Combinator
	 */
	def andThenWithCut[ExprZ <: Expr, B, Z](rhs:Parser[ExprZ, B])(implicit ev:typelevel.Sequenced[A,B,Z]):Parser[ExprZ, Z] =
		new parsers.AndThenWithCut(this, rhs, ev)

	/**
	 * Returns a parser which invokes this parser, and if this parser fails tries the other parser, and returns the first successful result
	 *
	 * @tparam Z the result parser's parsed value type
	 * @param rhs the parser to call after this one
	 * @param ev A descriptor of how to treat either value as one value
	 * @group Combinator
	 */
	def orElse[ExprZ <: Expr, B, Z](rhs:Parser[ExprZ, B])(implicit ev:typelevel.Eithered[A,B,Z]):Parser[ExprZ, Z] =
		new parsers.OrElse(this, rhs, ev)

	/**
	 * Returns a parser which invokes this parser repeatedly and returns the aggregated result
	 *
	 * @tparam Z the result parser's parsed value type
	 * @param min the minimum number of repeats to be considered successful
	 * @param max the maximum number of repeats to consume
	 * @param delimiter a parser describing separators between each repeat. Defaults to a parser that always succeeds and consumes no input.
	 * @param strategy whether the repeat will attempt to match as much or as little as possible, and whether it will backtrack. Default is [[RepeatStrategy.Possessive]]
	 * @param ev A descriptor of how to combine the repeated values into one value
	 * @group Combinator
	 */
	def repeat[ExprZ <: Expr, Z](
		min:Int = 0,
		max:Int = Integer.MAX_VALUE,
		delimiter:Parser[ExprZ, Unit] = parsers.Pass,
		strategy:RepeatStrategy = RepeatStrategy.Possessive)(
		implicit ev:typelevel.Repeated[A, Z]
	):Parser[ExprZ, Z] =
		new parsers.Repeat(this, min, max, delimiter, strategy, ev)

	/**
	 * Returns a parser which invokes this parser and provides a value whether this parser succeeded or failed
	 *
	 * @tparam Z the result parser's parsed value type
	 * @param strategy whether the optionally will attempt to match as much or as little as possible, and whether it will backtrack. Default is [[RepeatStrategy.Possessive]]
	 * @param ev A descriptor of how to mark present or absent values
	 * @group Combinator
	 */
	def optionally[Z](
		strategy:RepeatStrategy = RepeatStrategy.Possessive)(
		implicit ev:typelevel.Optionally[A, Z]
	):Parser[Expr, Z] =
		parsers.Optionally(this, strategy, ev)
}
